// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CopyVertices
#pragma kernel ApplyRigging

// Buffer definitions
RWStructuredBuffer<float3> _VertexBasePos;
RWStructuredBuffer<float3> _VertexModPos;

// For rigging
int _BoneCount;
StructuredBuffer<float4x4> _BoneMatrices;

struct VertexBoneData
{
    float4 weights;
    float4 indices; // Using float4 for indices and casting to int in the shader
};

StructuredBuffer<VertexBoneData> _BoneWeights;

// Simple kernel to copy vertices when no rigging is applied
[numthreads(256, 1, 1)]
void CopyVertices(uint3 id : SV_DispatchThreadID)
{
    uint vertexId = id.x;
    if (vertexId >= (uint)_VertexBasePos.Length)
        return;
        
    _VertexModPos[vertexId] = _VertexBasePos[vertexId];
}

// Main kernel to apply skinning
[numthreads(256, 1, 1)]
void ApplyRigging(uint3 id : SV_DispatchThreadID)
{
    uint vertexId = id.x;
    if (vertexId >= (uint)_VertexBasePos.Length)
        return;
    
    // Get base vertex position
    float3 basePos = _VertexBasePos[vertexId];
    float3 skinnedPos = float3(0, 0, 0);
    
    // Get bone data for this vertex
    VertexBoneData boneData = _BoneWeights[vertexId];
    float4 weights = boneData.weights;
    int4 indices = int4(boneData.indices); // Cast to int4
    
    // Validate bone indices
    bool hasValidWeights = false;
    
    // Calculate the skinned position
    if (weights.x > 0 && indices.x >= 0 && indices.x < _BoneCount)
    {
        float4 transformedPos = mul(_BoneMatrices[indices.x], float4(basePos, 1.0));
        skinnedPos += transformedPos.xyz * weights.x;
        hasValidWeights = true;
    }
    
    if (weights.y > 0 && indices.y >= 0 && indices.y < _BoneCount)
    {
        float4 transformedPos = mul(_BoneMatrices[indices.y], float4(basePos, 1.0));
        skinnedPos += transformedPos.xyz * weights.y;
        hasValidWeights = true;
    }
    
    if (weights.z > 0 && indices.z >= 0 && indices.z < _BoneCount)
    {
        float4 transformedPos = mul(_BoneMatrices[indices.z], float4(basePos, 1.0));
        skinnedPos += transformedPos.xyz * weights.z;
        hasValidWeights = true;
    }
    
    if (weights.w > 0 && indices.w >= 0 && indices.w < _BoneCount)
    {
        float4 transformedPos = mul(_BoneMatrices[indices.w], float4(basePos, 1.0));
        skinnedPos += transformedPos.xyz * weights.w;
        hasValidWeights = true;
    }
    
    // If we have valid weights, use the skinned position; otherwise, use the base position
    _VertexModPos[vertexId] = hasValidWeights ? skinnedPos : basePos;
}