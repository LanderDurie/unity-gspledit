#pragma kernel CSMain

// Structured buffers for vertex data
RWStructuredBuffer<float3> _VertexBasePos; // Original vertex positions
RWStructuredBuffer<float3> _VertexModPos;  // Output modified positions

// Animation and sine wave parameters
float time;
float3 amplitude;
float3 frequency;
float3 phase;
int3 animateFlags;

[numthreads(256, 1, 1)] // Adjust thread count based on workload
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexBasePos.Length) return;

    // Read the current vertex
    float3 basePos = _VertexBasePos[id.x];
    float3 modPos = float3(0, 0, 0); // Reset to avoid accumulation

    // X-axis sine deformation
    float timeValueX = animateFlags.x > 0 ? time : 0;
    modPos.x = sin((timeValueX + basePos.x * frequency.x) + phase.x) * amplitude.x;

    // Y-axis sine deformation
    float timeValueY = animateFlags.y > 0 ? time : 0;
    modPos.y = sin((timeValueY + basePos.z * frequency.y) + phase.y) * amplitude.y;

    // Z-axis sine deformation
    float timeValueZ = animateFlags.z > 0 ? time : 0;
    modPos.z = sin((timeValueZ + basePos.y * frequency.z) + phase.z) * amplitude.z;

    // Store the new position
    _VertexModPos[id.x] += modPos;
}
