#pragma kernel CSWavePropagation

struct VertexProperties {
    float3 pos;
    float3 normal;
    uint colorIds[4];
    float3 posMod;
    float4 rotMod;
    float3 scaleMod;
    uint colorModIds[4];
};

RWStructuredBuffer<VertexProperties> vertexBuffer;
RWByteAddressBuffer _VertexSelectedBits;
float time;
float3 epicenter;
float waveSpeed;
float waveHeight;
float waveFalloff;

bool isSelected(int idx) {
    uint wordIndex = idx >> 5;
    uint bitPosition = idx & 31;
    uint selectionWord = _VertexSelectedBits.Load(wordIndex * 4);
    return (selectionWord >> bitPosition) & 1;
}

[numthreads(256, 1, 1)]
void CSWavePropagation(uint id : SV_DispatchThreadID)
{
    if (id >= vertexBuffer.Length || !isSelected(id))
        return;
        
    VertexProperties vertex = vertexBuffer[id];
    
    float3 toVertex = vertex.pos - epicenter;
    float distance = length(toVertex);
    float wave = sin(distance * 0.5 - time * waveSpeed) * waveHeight;
    wave *= exp(-distance * waveFalloff); // Falloff with distance
    
    vertex.posMod += vertex.normal * wave;
    
    vertexBuffer[id] = vertex;
}