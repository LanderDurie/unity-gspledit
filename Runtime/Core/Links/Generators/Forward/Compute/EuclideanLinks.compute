#pragma kernel OpacityContributions
#include "../../../../Gaussian/Compute/GaussianSplatting.hlsl"
#include "../../../Compute/LinkUtilities.hlsl"
#include "./Utils.hlsl"

struct Triangle {
    int v0;
    int v1;
    int v2;
};

RWStructuredBuffer<float3> _VertexBasePos;
RWStructuredBuffer<Triangle> _MeshIndices;
uint _IndexCount;

uint _SplatCount;
float _GlobalSigma;
static const float MAX_DISTANCE = 1e30f;

[numthreads(128, 1, 1)]
void OpacityContributions(uint3 id : SV_DispatchThreadID) {
    uint splatIndex = id.x;
    if (splatIndex >= _SplatCount) return;

    SplatData splat = LoadSplatData(splatIndex);

    float minDistances[LINK_COUNT] = { MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE, 
                                      MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE };
    int minIndices[LINK_COUNT] = { -1, -1, -1, -1, -1, -1, -1, -1 };

    // First pass: find closest triangles
    [loop]
    for (uint i = 0; i < _IndexCount; i++) {
        Triangle t = _MeshIndices[i];
        float3 p1 = _VertexBasePos[t.v0];
        float3 p2 = _VertexBasePos[t.v1];
        float3 p3 = _VertexBasePos[t.v2];

        // Calculate distance and barycentric coordinates
        float distance = length(splat.pos - ClosestPoint(splat.pos, p1, p2, p3));

        // Insert the new distance, index, and barycentric coordinates into the sorted list
        for (uint j = 0; j < LINK_COUNT; j++) {
            if (distance < minDistances[j]) {
                // Shift existing values down
                for (uint k = LINK_COUNT - 1; k > j; k--) {
                    minDistances[k] = minDistances[k - 1];
                    minIndices[k] = minIndices[k - 1];
                }

                // Insert the new triangle and its barycentric coordinates
                minDistances[j] = distance;
                minIndices[j] = i;

                break;
            }
        }
    }

    float totalDist = 0.0;
    for (uint j = 0; j < LINK_COUNT; j++) {
        totalDist += minDistances[j];
    }

    // Calculate weights and store results
    SplatLink splatLinks;
    float sigmaSquared = _GlobalSigma * _GlobalSigma;
    float threshold = 0.00001;

    [unroll]
    for (uint k = 0; k < LINK_COUNT; k++) {
        float weight = 1 - (minDistances[k] / totalDist);
        splatLinks.triangleIds[k] = (weight > threshold) ? minIndices[k] : -1;
        splatLinks.triangleWeights[k] = (weight > threshold) ? weight : 0;

        // Store the barycentric coordinates
        splatLinks.triangleX[k] = (weight > threshold) ? 0 : 0;
        splatLinks.triangleY[k] = (weight > threshold) ? 0 : 0;
    }

    SetSplatLink(splatIndex, splatLinks);
}