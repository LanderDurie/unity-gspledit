#pragma kernel OpacityContributions
#include "../../../../Gaussian/Compute/GaussianSplatting.hlsl"
#pragma use_dxc

struct Triangle {
    int v0;
    int v1;
    int v2;
};
RWStructuredBuffer<float3> _VertexBasePos;
RWStructuredBuffer<int> _MeshIndices;
RWTexture2D<float4> _Distances;
RWStructuredBuffer<float> _AvgTriangleSizeBuffer; // Buffer to store average triangle size
uint _IndexCount;
uint _VertexCount;
uint _SplatCount;
// Compute signed distance from point to triangle
bool SignedDistancePointToTriangle(float3 p, float3 a, float3 b, float3 c, out float3 normal, out float value, out float area) {
    // Calculate triangle normal
    float3 ab = b - a;
    float3 ac = c - a;
    normal = normalize(cross(ab, ac));

    // Calculate triangle area
    area = 0.5 * length(cross(ab, ac));
    
   
    // Calculate distance from point to plane
    float planeDistance = dot(p - a, normal);
   
    // Check if point projects inside triangle
    float3 projection = p - planeDistance * normal;
   
    // Compute barycentric coordinates
    float3 v0 = b - a;
    float3 v1 = c - a;
    float3 v2 = projection - a;
   
    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);
   
    float denom = d00 * d11 - d01 * d01;
   
    // Avoid division by zero
    if (abs(denom) < 1e-6) return 0.0;
   
    float v = (d11 * d20 - d01 * d21) / denom;
    float w = (d00 * d21 - d01 * d20) / denom;
    float u = 1.0f - v - w;
   
    // If inside triangle, return signed distance to plane
    if (u >= 0.0f && v >= 0.0f && w >= 0.0f) {
        value = planeDistance;
        return true;
    }
   
    return false;
}
[numthreads(128, 1, 1)]
void OpacityContributions(uint3 id : SV_DispatchThreadID) {
    uint splatIndex = id.x;
    if (splatIndex >= _SplatCount) return;
   
    float3 pos = LoadSplatData(splatIndex).pos;
    float opacity = LoadSplatData(splatIndex).opacity;
    // Process triangles (indices are in groups of 3)
    for (uint i = 0; i < _IndexCount/3; i++) {
        // Get triangle vertices
        int idx0 = _MeshIndices[i*3];
        int idx1 = _MeshIndices[i*3+1];
        int idx2 = _MeshIndices[i*3+2];
       
        float3 p1 = _VertexBasePos[idx0];
        float3 p2 = _VertexBasePos[idx1];
        float3 p3 = _VertexBasePos[idx2];
       
        // Calculate normal and signed distance
        float3 normal;
        float signedDistance = 0;
        float area = 0;
        if (SignedDistancePointToTriangle(pos, p1, p2, p3, normal, signedDistance, area)) {
       
            // Map distance from range [-2, 2] to [0, 999]
            // Each column represents a distance from -2 to 2 with 1000 steps
            int distanceIndex = clamp(int((signedDistance + 0.5) * 100.0), 0, 99);
           
            // Store distance in texture
            // Each row (x) represents a triangle, each column (y) represents a distance bin
            // Add a small value (0.0001) to the correct color channel
            // _Distances[int2(i, (int)(distanceIndex / 4))] += 0.001 * opacity;
            _Distances[int2(i, distanceIndex)] += float4(0.001 * opacity, 0, 0, 0);

            _AvgTriangleSizeBuffer[0] += area;
        }
    }
}