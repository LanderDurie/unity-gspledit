#pragma kernel Generate
#include "../../../Gaussian/Compute/GaussianSplatting.hlsl"

#define FLT_MAX 3.402823466e+38
#define FLT_MIN -3.402823466e+38

struct Ico
{
    float3 center;                 // 12 bytes
    float3 vertices[12];           // 12 * float3 = 12 * 3 * 4 = 144 bytes
    uint3 indices[20];             // 20 * uint3 = 20 * 3 * 4 = 240 bytes
    float opacity;                 // 4 bytes
    float3 boundMin;               // 12 bytes
    float3 boundMax;               // 12 bytes
};

// Writable buffer for Ico structs
RWStructuredBuffer<Ico> _IcosahedronBuffer;

// Constants for icosahedron construction
static const float phi = (1.0f + sqrt(5.0f)) / 2.0f;
static const float norm = sqrt(1.0f + phi * phi);
static const float x = 1.0f / norm;
static const float y = phi / norm;

// Define the vertices of an icosahedron
static const float3 icosahedronVertices[12] = {
    float3(-x,  y,  0),
    float3( x,  y,  0),
    float3(-x, -y,  0),
    float3( x, -y,  0),
    float3( 0, -x,  y),
    float3( 0,  x,  y),
    float3( 0, -x, -y),
    float3( 0,  x, -y),
    float3( y,  0, -x),
    float3( y,  0,  x),
    float3(-y,  0, -x),
    float3(-y,  0,  x)
};

// Define the triangles of the icosahedron (20 faces, each with 3 vertices)
static const int icosahedronTriangles[60] = {
    0,  5, 11,
    0,  1,  5,
    0,  7,  1,
    0, 10,  7,
    0, 11, 10,
    1,  9,  5,
    5,  4, 11,
    11, 2, 10,
    10, 6,  7,
    7,  8,  1,
    3,  4,  9,
    3,  2,  4,
    3,  6,  2,
    3,  8,  6,
    3,  9,  8,
    4,  5,  9,
    4,  2, 11,
    6,  8,  7,
    6,  2,  3,
    8,  9,  1
};

float _GlobalScaleFactor;
int _Offset;

[numthreads(8, 8, 1)]
void Generate(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x + _Offset;
    SplatData splat = LoadSplatData(index);

    // Generate rotation and scale matrix
    float3x3 splatRotScaleMat = CalcMatrixFromRotationScale(splat.rot, splat.scale * _GlobalScaleFactor);

    _IcosahedronBuffer[index].center = splat.pos;

    // Initialize the bounding box
    float3 minBound = float3(FLT_MAX, FLT_MAX, FLT_MAX);
    float3 maxBound = float3(-FLT_MAX, -FLT_MAX, -FLT_MAX);

    // Initialize vertices and update bounds for the current Ico instance
    for (int i = 0; i < 12; i++)
    {
        float3 transformedVertex = mul(splatRotScaleMat, icosahedronVertices[i]);
        float3 finalPosition = splat.pos + transformedVertex;
        _IcosahedronBuffer[index].vertices[i] = finalPosition;

        // Update bounds
        minBound = min(minBound, finalPosition);
        maxBound = max(maxBound, finalPosition);
    }

    // Set bounding box in the Ico struct
    _IcosahedronBuffer[index].boundMin = minBound;
    _IcosahedronBuffer[index].boundMax = maxBound;

    // Set triangle indices for the current Ico instance
    for (int j = 0; j < 20; j++)
    {
        _IcosahedronBuffer[index].indices[j] = uint3(
            index * 12 + icosahedronTriangles[j * 3],
            index * 12 + icosahedronTriangles[j * 3 + 1],
            index * 12 + icosahedronTriangles[j * 3 + 2]
        );
    }
}
